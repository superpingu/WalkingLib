// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT, WHEEL, ax12;

  DEFAULT = 0;

  WHEEL = 1;

  ax12 = function(driver) {
    var create;
    return create = function(id) {
      var children, currentSpeed, currentTorque, moveCallback, presets, realID, result, upToDate;
      currentSpeed = -2000;
      currentTorque = -1;
      upToDate = {
        speed: false,
        torque: false
      };
      presets = {};
      children = [];
      moveCallback = function() {
        return console.log("AX12 " + id + " move finished");
      };
      realID = function(toCall) {
        return function() {
          if (id !== 0) {
            return toCall();
          } else {
            return null;
          }
        };
      };
      result = {
        update: function() {
          if (id === 0) {
            return;
          }
          if (!upToDate.speed) {
            driver.goalSpeed(id, currentSpeed);
          }
          if (!upToDate.torque) {
            driver.torque(id, currentTorque);
          }
          return upToDate.speed = upToDate.torque = true;
        },
        speed: function(speed) {
          var child, i, len, results;
          if (speed == null) {
            return currentSpeed;
          }
          upToDate.speed = speed === currentSpeed;
          currentSpeed = speed;
          results = [];
          for (i = 0, len = children.length; i < len; i++) {
            child = children[i];
            results.push(child.speed(speed));
          }
          return results;
        },
        torque: function(torque) {
          var child, i, len, results;
          if (torque == null) {
            return currentTorque;
          }
          upToDate.torque = torque === currentTorque;
          currentTorque = torque;
          results = [];
          for (i = 0, len = children.length; i < len; i++) {
            child = children[i];
            results.push(child.torque(torque));
          }
          return results;
        },
        LED: function(status) {
          if (id !== 0) {
            return driver.LED(id, status);
          }
        },
        position: realID(function() {
          return driver.position(id);
        }),
        moving: realID(function() {
          return driver.moving(id);
        }),
        temperature: realID(function() {
          return driver.temperature(id);
        }),
        voltage: realID(function() {
          return driver.voltage(id);
        }),
        error: realID(function() {
          return driver.status(id);
        }),
        moveTo: function(position, callback) {
          var child, childCallback, childrenLeft, i, len, results;
          if (callback != null) {
            moveCallback = callback;
          }
          if (id !== 0) {
            result.update();
            return driver.move(id, position, moveCallback);
          } else if (children.length !== 0) {
            childrenLeft = children.length;
            childCallback = function() {
              if (--childrenLeft === 0) {
                return moveCallback();
              }
            };
            results = [];
            for (i = 0, len = children.length; i < len; i++) {
              child = children[i];
              results.push(child.moveTo(position, childCallback));
            }
            return results;
          } else {
            return moveCallback();
          }
        },
        cancelCallback: function() {
          if (id !== 0) {
            return driver.cancelCallback(id);
          }
        },
        turn: function(speed) {
          var child, i, len, results;
          if (id !== 0) {
            upToDate.speed = true;
            result.update();
            return driver.turn(id, speed);
          } else if (children.length !== 0) {
            results = [];
            for (i = 0, len = children.length; i < len; i++) {
              child = children[i];
              results.push(child.turn(speed));
            }
            return results;
          }
        },
        preset: function(name, preset, force) {
          if ((result[name] != null) && !force) {
            console.log("This name is already is use, please choose another one");
            return;
          }
          presets[name] = preset;
          if (preset.wheel != null) {
            return result[name] = function() {
              if (preset.torque != null) {
                result.torque(preset.torque);
              }
              if (preset.speed != null) {
                return result.turn(preset.speed);
              }
            };
          } else {
            return result[name] = function(callback) {
              if (preset.torque != null) {
                result.torque(preset.torque);
              }
              if (preset.speed != null) {
                result.speed(preset.speed);
              }
              if (preset.position != null) {
                return result.moveTo(preset.position, callback);
              }
            };
          }
        },
        presets: function(presets) {
          var name, preset, results;
          results = [];
          for (name in presets) {
            preset = presets[name];
            results.push(result.preset(name, preset));
          }
          return results;
        },
        create: function(id) {
          var k, newAX, v;
          newAX = create(id);
          newAX.speed(currentSpeed);
          newAX.torque(currentTorque);
          for (k in presets) {
            v = presets[k];
            newAX.preset(k, v, true);
          }
          children.push(newAX);
          return newAX;
        }
      };
      return result;
    };
  };

  module.exports = ax12;

}).call(this);
